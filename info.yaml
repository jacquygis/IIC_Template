--- 
# Tiny Tapeout project information
project:
  title: "4Bit CPU with FSM"
  author: "Jacqueline Gislai"
  language: "Verilog"
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - "tt_um_4bit_cpu_with_fsm.v"
  top_module:  "tt_um_4bit_cpu_with_fsm"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Jacqueline Gislai"      # Your name
  title:        "4-Bit-CPU with FSM"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "For simple calculations and logic operations"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Can store and load binary values, can do small mathematical and logic operations
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
    bla bla
    # A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - compare bit 11
    - compare bit 12
    - compare bit 13
    - compare bit 14
    - compare bit 15
    - compare bit 16
    - compare bit 17
    - compare bit 18
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - second counter bit 0
    - second counter bit 1
    - second counter bit 2
    - second counter bit 3
    - second counter bit 4
    - second counter bit 5
    - second counter bit 6
    - second counter bit 7
